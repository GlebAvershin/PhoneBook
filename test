from flask import Flask, request, redirect, render_template, flash
from sqlalchemy import create_engine, Column, Integer, String, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret_key_here'  # Необходимо для flash
Base = declarative_base()
engine = create_engine(os.getenv('DATABASE_URL'))
Session = sessionmaker(bind=engine)

class Contact(Base):
    __tablename__ = 'contacts'
    id = Column(Integer, primary_key=True)
    fio = Column(String(50), nullable=False)
    phone_number = Column(String(11), nullable=False)
    note = Column(Text)

Base.metadata.create_all(engine)

def validate_phone(phone):
    """Проверка номера телефона."""
    if len(phone) != 11 or not phone.isdigit():
        return False
    return True

def validate_fio(fio):
    """Проверка ФИО."""
    if len(fio) > 50 or not fio.replace(' ', '').isalpha():
        return False
    return True

@app.route('/', methods=['GET'])
def index():
    session = Session()
    contacts = session.query(Contact).all()
    session.close()
    return render_template('index.html', contacts=contacts)

@app.route('/create', methods=['POST'])
def create():
    session = Session()
    fio = request.form['fio']
    phone_number = request.form['phone_number']
    note = request.form['note']

    if not validate_fio(fio):
        flash("Ошибка: ФИО должно содержать только текстовые символы и не более 50 символов.")
        return redirect('/')
    
    if not validate_phone(phone_number):
        flash("Ошибка: Номер телефона должен состоять из 11 цифр.")
        return redirect('/')

    new_contact = Contact(
        fio=fio,
        phone_number=phone_number,
        note=note
    )
    session.add(new_contact)
    session.commit()
    session.close()
    flash("Контакт успешно добавлен.", 'success')
    return redirect('/')

@app.route('/update/<int:id>', methods=['GET', 'POST'])
def update(id):
    session = Session()
    contact = session.query(Contact).get(id)
    
    if request.method == 'POST':
        fio = request.form['fio']
        phone_number = request.form['phone_number']
        note = request.form['note']

        if not validate_fio(fio):
            flash("Ошибка: ФИО должно содержать только текстовые символы и не более 50 символов.")
            return render_template('index.html', update_id=id, update_fio=contact.fio, update_phone_number=contact.phone_number, update_note=contact.note)
        
        if not validate_phone(phone_number):
            flash("Ошибка: Номер телефона должен состоять из 11 цифр.")
            return render_template('index.html', update_id=id, update_fio=contact.fio, update_phone_number=contact.phone_number, update_note=contact.note)

        contact.fio = fio
        contact.phone_number = phone_number
        contact.note = note
        session.commit()
        session.close()
        flash("Контакт успешно обновлён.", 'success')
        return redirect('/')
    
    session.close()
    return render_template('index.html', update_id=id, update_fio=contact.fio, update_phone_number=contact.phone_number, update_note=contact.note)

@app.route('/delete/<int:id>')
def delete(id):
    session = Session()
    contact = session.query(Contact).get(id)
    session.delete(contact)
    session.commit()
    session.close()
    flash("Контакт успешно удалён.", 'success')
    return redirect('/')

if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=True)




<!DOCTYPE html>
<html>
<head>
    <title>Телефонная книга</title>
    <style>
        /* Стили для страницы */
        body {
            background-image: url('https://source.unsplash.com/1600x900/?background,gradient');
            height: 100vh;
            font-family: Arial, sans-serif;
            background-size: cover;
            background-attachment: fixed;
        }

        /* Стили для контейнера */
        .container {
            max-width: 800px;
            margin: auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            margin-top: 20px;
        }

        /* Стили для заголовков */
        .title {
            text-align: center;
            color: #333;
            font-size: 24px;
            margin-bottom: 10px;
        }

        .subtitle {
            margin-top: 20px;
            font-size: 18px;
            color: #666;
        }

        /* Стили для форм */
        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 10px;
            font-weight: bold;
        }

        input[type="text"], input[type="email"] {
            width: 100%;
            height: 30px;
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0,0,0,0.1);
        }

        /* Стили для кнопок */
        .btn-add {
            background-color: #4CAF50;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .btn-add:hover {
            background-color: #3e8e41;
        }

        .btn-update {
            background-color: #03A9F4;
            color: #fff;
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            font-size: 14px;
        }

        .btn-update:hover {
            background-color: #0277bd;
        }

        .btn-delete {
            background-color: #f44336;
            color: #fff;
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            font-size: 14px;
        }

        .btn-delete:hover {
            background-color: #e91e63;
        }

        .btn-update-form {
            background-color: #03A9F4;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .btn-update-form:hover {
            background-color: #0277bd;
        }

        /* Стили для списка контактов */
        .contacts-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .contact-item {
            padding: 10px;
            border-bottom: 1px solid #ddd;
            background-color: #f9f9f9;
            border-radius: 5px;
            margin-bottom: 10px;
            box-shadow: 0 0 5px rgba(0,0,0,0.1);
        }

        .contact-item:last-child {
            border-bottom: none;
        }

        /* Стили для сообщений */
        .flashes {
            list-style: none;
            padding: 0;
            margin: 10px 0;
            border-radius: 5px;
        }

        .flashes li {
            padding: 10px;
            margin-bottom: 5px;
            border-radius: 5px;
        }

        .flashes li.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .flashes li.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="title">Телефонная книга</h1>

        <!-- Сообщения об ошибках и успехах -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                <ul class="flashes">
                    {% for category, message in messages %}
                        <li class="{{ category }}">{{ message }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        {% endwith %}
        
        <!-- Форма для добавления нового контакта -->
        <h2 class="subtitle">Добавить контакт</h2>
        <form method="post" action="/create">
            <div class="form-group">
                <label>ФИО:</label>
                <input type="text" name="fio" maxlength="50" class="input-field">
            </div>
            <div class="form-group">
                <label>Телефон:</label>
                <input type="text" name="phone_number" class="input-field">
            </div>
            <div class="form-group">
                <label>Заметка:</label>
                <input type="text" name="note" class="input-field">
            </div>
            <input type="submit" value="Добавить" class="btn-add">
        </form>
        
        <!-- Список всех контактов -->
        <h2 class="subtitle">Список контактов</h2>
        <ul class="contacts-list">
        {% for contact in contacts %}
            <li class="contact-item">{{ contact.fio }} ({{ contact.phone_number }}) - {{ contact.note }} 
                <a href="/update/{{ contact.id }}" class="btn-update">Обновить</a> 
                <a href="/delete/{{ contact.id }}" class="btn-delete">Удалить</a>
            </li>
        {% endfor %}
        </ul>
        
        <!-- Форма для обновления контакта -->
        {% if update_id %}
        <h2 class="subtitle">Обновить контакт {{ update_id }}</h2>
        <form method="post" action="/update/{{ update_id }}">
            <div class="form-group">
                <label>ФИО:</label>
                <input type="text" name="fio" value="{{ update_fio }}" maxlength="50" class="input-field">
            </div>
            <div class="form-group">
                <label>Телефон:</label>
                <input type="text" name="phone_number" value="{{ update_phone_number }}" class="input-field">
            </div>
            <div class="form-group">
                <label>Заметка:</label>
                <input type="text" name="note" value="{{ update_note }}" class="input-field">
            </div>
            <input type="submit" value="Обновить" class="btn-update-form">
        </form>
        {% endif %}
    </div>
</body>
</html>
